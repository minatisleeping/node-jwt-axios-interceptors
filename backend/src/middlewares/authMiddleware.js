/* eslint-disable no-console */
import { MESSAGES } from '~/config/messages'
import { StatusCodes } from 'http-status-codes'
import { JwtProvider } from '~/providers/JwtProvider'
import { env } from '~/config/environment'

/*  Middleware n√†y s·∫Ω ƒë·∫£m nhi·ªám vi·ªác quan tr·ªçng: L·∫•y v√† x√°c th·ª±c c√°i jwt accessToken nahn65 ƒë∆∞·ª£c t·ª´ ph√≠a
  FE c√≥ h·ª£p l·ªá hay kh√¥ng
*/
const isAuthorized = async (req, res, next) => {
  //*   C√°ch 1: L·∫•y accessToken n·∫±m trong req Cookies ph√≠a Client - withCredentials trong file
//* authorizeAxios v√† credentials trong CORS
  const accessTokenFromCookie = req.cookies?.accessToken
  console.log('üöÄ ~ accessTokenFromCookie:', accessTokenFromCookie)
  console.log('---')
  if (!accessTokenFromCookie) {
    return res.status(StatusCodes.UNAUTHORIZED).json({ message: MESSAGES.UNAUTHORIZED })
  }

  //*   C√°ch 2: L·∫•y accessToken trong case ph√≠a FE l∆∞u localStorage v√† g·ª≠i l√™n th√¥ng qua header authorization
  const accessTokenFromHeader = req.headers.authorization
  if (!accessTokenFromHeader) {
    return res.status(StatusCodes.UNAUTHORIZED).json({ message: MESSAGES.UNAUTHORIZED })
  }

  try {
    // B∆∞·ªõc 1: Th·ª±c hi·ªán gi·∫£i m√£ token xem n√≥ c√≥ h·ª£p l·ªá hay kh√¥ng
    const decodedAccessToken = await JwtProvider.verifyToken(
      // accessTokenFromCookie,
      accessTokenFromHeader.substring('Bearer '.length),
      env.ACCESS_TOKEN_SECRET_SIGNATURE
    )

    // B∆∞·ªõc 2: N·∫øu nh∆∞ c√°i token h·ª£p l·ªá, th√¨ c·∫ßn ph·∫£i l∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c v√†o c√°i req.jwtDecoded,
    // ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c t·∫ßng c·∫ßn x·ª≠ l√≠ ph·ªâa sau
    req.jwtDecoded = decodedAccessToken

    // B∆∞·ªõc 3: Cho ph√©p c√°i req ƒëi t√≠p :)))
    next()
  } catch (error) {
    console.log('Error from authMiddleware ', authMiddleware)
    //! Case 01: N·∫øu accessToken h·∫øt h·∫°n th√¨ m√¨nh c·∫ßn tr·∫£ v·ªÅ m√£ l·ªói GONE - 410 cho FE bi·∫øt
    //ƒë·ªÉ g·ªçi API refresh token
    if (error.message?.includes('jwt expired')) {
      return res.status(StatusCodes.GONE).json({ message: MESSAGES.TOKEN_EXPIRED })
    }

    //! Case 02: N·∫øu accessToken kh√¥ng h·ª£p l·ªá do b·∫•t k√¨ l√Ω do g√¨ kh√°c token h·∫øt h·∫°n th√¨ m√¨nh
    //c·ª© th·∫≥ng tay tr·∫£ v·ªÅ m√£ UNAUTHORIZED - 401 cho FE  x·ª≠ l√≠ Logout or call api Logout tu·ª≥ case
    return res.status(StatusCodes.UNAUTHORIZED).json({ message: MESSAGES.UNAUTHORIZED_LOGIN })
  }
}

export const authMiddleware = {
  isAuthorized
}
