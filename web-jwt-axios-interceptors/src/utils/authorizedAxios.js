import axios from 'axios'
import { toast } from 'react-toastify'
import { handleLogoutAPI, refreshTokenAPI } from '~/apis'

// Kh·ªüi t·∫°o 1 ƒë·ªëi t∆∞·ª£ng axios (authorizedAxiosInstance) m·ª•c ƒë√≠ch ƒë·ªÉ custom v√† c·∫•u h√¨nh chung cho d·ª± √°n
let authorizedAxiosInstance = axios.create()
// Th·ªùi gian t·ªëi ƒëa c·ªßa 1 request l√† 10'
authorizedAxiosInstance.defaults.timeout = 1000 * 60 * 10
// withCredentials: s·∫Ω cho ph√©p axios t·ª± ƒë·ªông ƒë√≠nh k√®m v√† g·ª≠i cookie trong m·ªói request l√™n BE(ph·ª•c v·ª•
//tr∆∞·ªùng h·ª£p n·∫øu ch√∫ng ta l∆∞u jwt tokens(access & refresh)) theo c∆° ch·∫ø httpOnly Cookie )
authorizedAxiosInstance.defaults.withCredentials = true

//! C·∫•u h√¨nh Interceptors (B·ªô ƒë√°nh ch·∫∑n v√†o m·ªói Request v√† Response)
//* Add a request interceptor: Can thi·ªáp v√†o gi·ªØa c√°c request API
authorizedAxiosInstance.interceptors.request.use(config => {
  // L·∫•y accessToken t·ª´ localStorage v√† ƒë√≠nh k√®m v√†o header
  const accessToken = localStorage.getItem('accessToken')
  if (accessToken) {
    config.headers.Authorization = `Bearer ${accessToken}`
  }
  return config
}, error => { return Promise.reject(error) })

//* Add a response interceptor: Can thi·ªáp v√†o gi·ªØa c√°c response API
authorizedAxiosInstance.interceptors.response.use(response => {
  return response
}, error => {
  //! Khu v·ª±c quan tr·ªçng: X·ª≠ l√Ω refresh token t·ª± ƒë·ªông
  // N·∫øu nh∆∞ nh·∫≠n m√£ 401 t·ª´ BE, th√¨ g·ªçi API Logout lu√¥n
  if (error.response?.status === 401) {
    handleLogoutAPI().then(() => {
      // N·∫øu tr∆∞·ªùng h·ª£p d√πng Cookie th√¨ nh·ªõ xo√° userInfo trong localStorage
      // localStorage.removeItem('userInfo')

      // ƒêi·ªÅu h∆∞·ªõng t·ªõi trang Login khi logout th√†nh c√¥ng
      location.href = '/login' // js thu·∫ßn
    })
  }

  // N·∫øu nh∆∞ nh·∫≠n m√£ 410 t·ª´ BE, th√¨ s·∫Ω g·ªçi API refresh token ƒë·ªÉ l√†m m·ªõi l·∫°i accessToken
  // ƒê·∫ßu ti√™n l·∫•y ƒë∆∞·ª£c c√°c request API ƒëang b·ªã l·ªói th√¥ng qua error.config
  const originalRequest = error.config
  console.log('üöÄ ~ originalRequest:', originalRequest)

  if (error.response?.status === 410 && !originalRequest._retry) {
    // G√°n th√™m m·ªôt gi√° tr·ªã _retry lu√¥n = true trong kho·∫£ng th·ªùi gian ch·ªù, ƒë·ªÉ vi·ªác refresh token
    //n√†y ch·ªâ lu√¥n g·ªçi 1 l·∫ßn t·∫°i 1 th·ªùi ƒëi·ªÉm
    originalRequest._retry = true

    // L·∫•y refreshToken t·ª´ localStorage (in case localStorage)
    const refreshToken = localStorage.getItem('refreshToken')
    // G·ªçi API refresh token
    return refreshTokenAPI(refreshToken)
      .then(res => {
        // L·∫•y v√† g√°n l·∫°i accessToken v√†o localStorage (in case localStorage)
        const { accessToken } = res.data
        localStorage.setItem('accessToken', accessToken)
        authorizedAxiosInstance.defaults.headers.Authorization = `Bearer ${accessToken}abcxyz`

        // ƒê·ªìng th·ªùi l∆∞u √Ω l√† accessToken c≈©ng ƒë√£ ƒë∆∞·ª£c update l·∫°i ·ªü Cookie r·ªìi (in case Cookie)

        // B∆∞·ªõc cu·ªëi c√πng quan trong: return l·∫°i axios instance c·ªßa ch√∫ng ta k·∫øt h·ª£p c√°i originalRequest ƒë·ªÉ
        //g·ªçi l·∫°i nh·ªØng API ban ƒë·∫ßu b·ªã l·ªói
        return authorizedAxiosInstance(originalRequest)
      })
      .catch(_error => {
        // N·∫øu nh·∫≠n b·∫•t c·ª© l·ªói n√†o t·ª´ API refresh token th√¨ c·ª© Logout lu√¥n
        handleLogoutAPI().then(() => {
          // N·∫øu tr∆∞·ªùng h·ª£p d√πng Cookie th√¨ nh·ªõ xo√° userInfo trong localStorage
          // localStorage.removeItem('userInfo')

          // ƒêi·ªÅu h∆∞·ªõng t·ªõi trang Login khi logout th√†nh c√¥ng
          location.href = '/login' // js thu·∫ßn
        })
        return Promise.reject(_error)
      })
  }

  // X·ª≠ l√Ω t√¢p trung ph·∫ßn hi·ªÉn th·ªã th√¥ng b√°o l·ªói tr·∫£ v·ªÅ t·ª´ m·ªçi API
  if (error.response?.status !== 410) {
    toast.error(error.response?.data?.message || error?.message)
  }

  return Promise.reject(error)
})

export default authorizedAxiosInstance
