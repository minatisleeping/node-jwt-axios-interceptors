import { StatusCodes } from 'http-status-codes'
import ms from 'ms'
import { JwtProvider } from '../providers/JwtProvider'
import { env } from '~/config/environment'
import { MESSAGES } from '~/config/messages'

const MOCK_DATABASE = {
  USER: {
    ID: 'minatisleeping-sample-id-12345678',
    EMAIL: 'minatt2002@gmail.com',
    PASSWORD: 'Minat123!'
  }
}

const ACCESS_SECRET_SIGNATURE = env.ACCESS_TOKEN_SECRET_SIGNATURE
const REFRESH_SECRET_SIGNATURE = env.REFRESH_TOKEN_SECRET_SIGNATURE

const login = async (req, res) => {
  try {
    if (req.body.email !== MOCK_DATABASE.USER.EMAIL || req.body.password !== MOCK_DATABASE.USER.PASSWORD) {
      return res.status(StatusCodes.UNAUTHORIZED).json({ message: MESSAGES.LOGIN_FAILED })
    }

    // Tr∆∞·ªùng h·ª£p nh·∫≠p ƒë√∫ng th√¥ng tin t√†i kho·∫£n, t·∫°o token v√† tr·∫£ v·ªÅ cho ph√≠a Client
    // T·∫°o th√¥ng tin payload ƒë·ªÉ ƒë√≠nh k√®m trong JWT Token: bao g·ªìm id v√† email c·ªßa user
    const userInfo = {
      id: MOCK_DATABASE.USER.ID,
      email: MOCK_DATABASE.USER.EMAIL
    }

    const accessToken = await JwtProvider.signToken(userInfo, ACCESS_SECRET_SIGNATURE, '1h')
    const refreshToken = await JwtProvider.signToken(userInfo, REFRESH_SECRET_SIGNATURE, ms('30d'))

    /**
     * X·ª≠ l√Ω tr∆∞·ªùng h·ª£p tr·∫£ v·ªÅ http only cookie cho ph√≠a tr√¨nh duy·ªát
     * ƒê·ªëi v·ªõi c√°i maxAge - th·ªùi gian s·ªëng c·ªßa Cookie th√¨ ch√∫ng ta s·∫Ω ƒë·ªÉ t·ªëi ƒëa 14 ng√†y, tu·ª≥ project.
    */
    //! L∆∞u √Ω: Th·ªùi gian s·ªëng c·ªßa Cookie kh√°c v·ªõi c√°i th·ªùi gian s·ªëng c·ªßa token
    res.cookie('accessToken', accessToken, {
      httpOnly: true,
      secure: true,
      sameSite: 'none',
      maxAge: ms('14 days')
    })
    res.cookie('refreshToken', refreshToken, {
      httpOnly: true,
      secure: true,
      sameSite: 'none',
      maxAge: ms('14 days')
    })

    // Tr·∫£ v·ªÅ th√¥ng tin user c≈©ng nh∆∞ s·∫Ω tr·∫£ v·ªÅ Token cho tr∆∞·ªùng h·ª£p ph√≠a FE c·∫ßn l∆∞u Token v√†o LocalStorage
    return res.status(StatusCodes.OK).json({ ...userInfo, accessToken, refreshToken })
  } catch (error) {
    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(error)
  }
}

const logout = async (req, res) => {
  try {
    // Xo√° Cookie - ƒë∆°n gi·∫£n l√† l√†m ng∆∞·ª£c l·∫°i so v·ªõi vi·ªác g√°n Cookie ·ªü h√†m Login
    res.clearCookie('accessToken')
    res.clearCookie('refreshToken')

    return res.status(StatusCodes.OK).json({ message: 'Logout API success!' })
  } catch (error) {
    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(error)
  }
}

const refreshToken = async (req, res) => {
  try {
    // C√°ch 1: L·∫•y lu√¥n t·ª´ Cookie ƒë√£ ƒë√≠nh k√®m v√†o request
    const refreshTokenFromCookie = req.cookies?.refreshToken

    // C√°ch 2: L·∫•y t·ª´ localStorage ph√≠a FE s·∫Ω truy·ªÅn v√†o body khi call API
    const refreshTokenFromBody = req.body?.refreshToken

    // Verify / gi·∫£i m√£ c√°i refresh token xem c√≥ h·ª£p l·ªá kh√¥ng
    const refreshTokenDecoded = await JwtProvider.verifyToken(
      // refreshTokenFromCookie,
      refreshTokenFromBody,
      env.REFRESH_TOKEN_SECRET_SIGNATURE
    )

    /* ƒêo·∫°n n√†y v√¨ ch√∫ng ta ch·ªâ l∆∞u nh·ªØng th√¥ng tin unique v√† c·ªë ƒë·ªãnh c·ªßa user trong token r·ªìi, v√¨ v·∫≠y c√≥ th·ªÉ
    l·∫•y lu√¥n t·ª´ decoded ra, ti·∫øt ki·ªám query v√†o DB ƒë·ªÉ l·∫•y data m·ªõi */
    const userInfo = {
      id: refreshTokenDecoded.id,
      email: refreshTokenDecoded.email
    }

    // T·∫°o accessToken m·ªõi cho tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng Cookie
    const accessToken = await JwtProvider.signToken(userInfo, ACCESS_SECRET_SIGNATURE, '1h')

    // Res l·∫°i Cookie accessToken m·ªõi cho tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng Cookie
    res.cookie('accessToken', accessToken, {
      httpOnly: true,
      secure: true,
      sameSite: 'none',
      maxAge: ms('14 days')
    })

    // Tr·∫£ v·ªÅ accessToken m·ªõi cho tr∆∞·ªùng h·ª£p FE c·∫ßn update l·∫°i trong localStorage
    res.status(StatusCodes.OK).json({ accessToken })
  } catch (error) {
    // console.log('üöÄ ~ error:', error)
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ message: MESSAGES.REFRESH_TOKEN_FAILED })
  }
}

export const userController = {
  login,
  logout,
  refreshToken
}
